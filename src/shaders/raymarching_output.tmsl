blend_states : {
    logical_operation_enable: false
    render_target_0 : {
        blend_enable: true
        write_mask : "red|green|blue|alpha"
        source_blend_factor_color : "source_alpha"
        destination_blend_factor_color : "one_minus_source_alpha"
    }
} 

raster_states : {
    polygon_mode: "fill"
    cull_mode: "none" 
    front_face : "ccw"
}

imports : [    
    { name: "tm" type: "float4x4" }
]

common : [[
#define MAX_STEPS 1000
#define MAX_DIST 1000.0
#define SURF_DIST 0.01
]]

vertex_shader : {
    import_system_semantics : [ "vertex_id" ]
    exports : [
        { name: "camera_ray" type: "float3"}
        { name: "world_position" type: "float3" channel_requested: true }
    ]

    code : [[

        tm_graph_io_t graph;
        #if defined(TM_CHANNEL_REQUESTED_world_position)
            graph.world_position = load_tm()._m30_m31_m32;
        #endif

        static const float4 pos[3] = {
            { -1,  1,  0, 1 },
            {  3,  1,  0, 1 },
            { -1, -3,  0, 1 },
        };
    
        output.position = pos[vertex_id];


        float4x4 inverse_view = load_camera_inverse_view();
        float4 cp = float4(pos[vertex_id].xy, 0, 1);
        float4 p = mul(cp, load_camera_inverse_projection());
        output.camera_ray = mul(p.xyz, (float3x3)inverse_view);        

        tm_graph_write(output, graph);
        return output;
    ]]
}

pixel_shader : {
    exports : [
        { name : "color" type: "float4" }
        { name: "sample_position" type: "float3" channel_requested: true }
    ]

    code : [[


        float3 world_pos = load_camera_position();
        float3 world_dir = normalize(input.camera_ray);

        tm_graph_io_t graph;
        tm_graph_read(graph, input);
        tm_graph_evaluate(graph);

        // Get distance
        float d = 0.0;
        float amb = 0.0;
        float alpha = 1.0;
        for (int i = 0; i < MAX_STEPS; i++) {
            float3 p = world_pos + world_dir * d;
            #if defined(TM_CHANNEL_REQUESTED_sample_position)
                graph.sample_position = p;
            #endif        
            tm_graph_evaluate_distance(graph);
            float ds = graph.distance;
            d += ds;

            if (ds < SURF_DIST) {
                amb = 0.01;
                break;
            }
            if (d > MAX_DIST) {
                alpha = 0.0;
                break;
            }
        }
        
        float3 p = world_pos + world_dir * d;

        // Normal calculation
        #if defined(TM_CHANNEL_REQUESTED_sample_position)
            graph.sample_position = p;
        #endif        
        tm_graph_evaluate_distance(graph);
        d = graph.distance;

        float2 e = float2(0.01, 0);

        #if defined(TM_CHANNEL_REQUESTED_sample_position)
            graph.sample_position = p - e.xyy;
        #endif        
        tm_graph_evaluate_distance(graph);
        float n1 = graph.distance;

        #if defined(TM_CHANNEL_REQUESTED_sample_position)
            graph.sample_position = p - e.yxy;
        #endif        
        tm_graph_evaluate_distance(graph);
        float n2 = graph.distance;

        #if defined(TM_CHANNEL_REQUESTED_sample_position)
            graph.sample_position = p - e.yyx;
        #endif        
        tm_graph_evaluate_distance(graph);
        float n3 = graph.distance;

        float3 n = float3(d, d, d) - float3(n1, n2, n3);
        n = normalize(n);
        
        // Light calculation
        float3 light_pos = graph.light_position;
        float3 l = normalize(light_pos - p);
        float dif = saturate(dot(n, l));

        d = 0.f;
        for (int j = 0; j < MAX_STEPS; j++) {
            float3 pos = (p + n * SURF_DIST * 2.0) + l * d;
            #if defined(TM_CHANNEL_REQUESTED_sample_position)
                graph.sample_position = pos;
            #endif        
            tm_graph_evaluate_distance(graph);
            float ds = graph.distance;
            d += ds;

            if (d > MAX_DIST || ds < SURF_DIST) 
                break;
        }

        if (d < length(light_pos))
            dif *= 0.1;

        float3 col = graph.color;
        col = col * dif + amb;

        output.color = float4(col, alpha);

        return output;

    ]]
}

creation_graph_node : {
    name: "raymarch_output"
    display_name: "Raymarch"
    category: "Shader/Output"

    inputs : [
        { name: "distance" display_name: "Distance" type: "float" evaluation_stage: ["pixel_shader"] evaluation_contexts : ["distance"] optional: false }
        { name: "color" display_name: "Color (3)" type: "float3" evaluation_stage: ["pixel_shader"] evaluation_contexts : ["default", "color"] optional: false }
        { name: "light_position" display_name: "Light Pos (3)" type: "float3" evaluation_stage: ["pixel_shader"] optional: false }
    ]
}

compile : {
    configurations: {
        default: [
            { 
                variations : [
                    { systems: [ "viewer_system" ] }
                ]
            }
        ]

    }

    contexts: {
        viewport: [
            { layer: "hdr-transparency" configuration: "default" }
        ]
    }
}
